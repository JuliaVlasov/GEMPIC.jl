var documenterSearchIndex = {"docs":
[{"location":"contents/#Contents","page":"Contents","title":"Contents","text":"","category":"section"},{"location":"contents/","page":"Contents","title":"Contents","text":"","category":"page"},{"location":"contents/#Index","page":"Contents","title":"Index","text":"","category":"section"},{"location":"contents/","page":"Contents","title":"Contents","text":"","category":"page"},{"location":"mesh/#Mesh","page":"Mesh","title":"Mesh","text":"","category":"section"},{"location":"mesh/","page":"Mesh","title":"Mesh","text":"Modules = [GEMPIC]\nPages   = [\"mesh.jl\"]","category":"page"},{"location":"mesh/#GEMPIC.OneDGrid","page":"Mesh","title":"GEMPIC.OneDGrid","text":"OneDGrid( xmin, xmax, nx )\n\nSimple structure to store mesh data from 1 dimension\n\n\n\n\n\n","category":"type"},{"location":"mesh/#GEMPIC.ThreeDGrid","page":"Mesh","title":"GEMPIC.ThreeDGrid","text":"ThreeDGrid( dimx, nx, dimy, ny, dimz, nz)\n\nGenerate a cartesians mesh on cube dimx x dimy x dimz with nx x ny x nz points\n\nnx : indices are in [1:nx]\nny : indices are in [1:ny]\nnz : indices are in [1:nz]\ndimx = xmax - xmin\ndimy = ymax - ymin\ndimz = zmax - zmin\nx, y, z : node positions\ndx, dy, dz : step size\n\n\n\n\n\n","category":"type"},{"location":"mesh/#GEMPIC.TwoDGrid","page":"Mesh","title":"GEMPIC.TwoDGrid","text":"TwoDGrid( dimx, nx, dimy, ny)\n\nGenerate a cartesians mesh on rectangle dimxx dimy with nx x ny points\n\nnx : indices are in [1:nx]\nny : indices are in [1:ny]\ndimx = xmax - xmin\ndimy = ymax - ymin\nx, y : node positions\ndx, dy : step size\n\n\n\n\n\n","category":"type"},{"location":"mesh/#GEMPIC.get_cell_and_offset-Tuple{OneDGrid, Any}","page":"Mesh","title":"GEMPIC.get_cell_and_offset","text":"get_cell_and_offset( mesh, x )\n\nGet cell and offset\n\nWe compute the cell indices where the particle is and its relative  normalized position inside the cell\n\n\n\n\n\n","category":"method"},{"location":"mesh/#GEMPIC.get_x-Tuple{OneDGrid, Any}","page":"Mesh","title":"GEMPIC.get_x","text":"get_x( mesh, i )\n\nGet position\n\n\n\n\n\n","category":"method"},{"location":"distributions/#Distributions","page":"Distributions","title":"Distributions","text":"","category":"section"},{"location":"distributions/","page":"Distributions","title":"Distributions","text":"Modules = [GEMPIC]\nPages   = [\"distributions.jl\"]","category":"page"},{"location":"distributions/#GEMPIC.CosGaussianParams","page":"Distributions","title":"GEMPIC.CosGaussianParams","text":"CosGaussianParams( dims, k, α, σ, μ, δ )\n\nParameters of a distribution with is a product of a Cosine  distribution along x and a Normal distribution along v.\n\nn_gaussians : Number of Gaussians\nn_cos       : Number of cosines\nnormal      : Normalization constant of each Gaussian\n\n\n\n\n\n","category":"type"},{"location":"distributions/#GEMPIC.CosSumGaussian","page":"Distributions","title":"GEMPIC.CosSumGaussian","text":"CosSumGaussian{D,V}( n_cos, n_gaussians, k, α, σ, μ, δ )\n\nData type for parameters of initial distribution\n\n(1+ cos( sum^n_cos_i=1 k_i x)) \ncdot \nsum_j=1^n_gaussians \ndelta_j \nexp big( -frac12 \nfrac(v-mu_j)^2sigma_j^2 big)\n\nParameters\n\nk : values of the wave numbers (one array for each cosines)\nα : strength of perturbations\nσ : variance of the Gaussian (one velocity vector for each gaussian).\nμ : mean value of the Gaussian (one velocity vector for each gaussian).\nδ : portion of each Gaussian \n\nExample\n\nf(xv_1v_2)=frac12pisigma_1sigma_2 exp Big( - frac12\nbig( fracv_1^2sigma_1^2 + fracv_2^2sigma_2^2 big) \nBig) ( 1 + alpha cos(kx))\n\ndf = CosSumGaussian{1,2}([[k]],[α], [[σ₁,σ₂]], [[μ₁,μ₂]])\n\n\n\n\n\n","category":"type"},{"location":"distributions/#GEMPIC.SumCosGaussian","page":"Distributions","title":"GEMPIC.SumCosGaussian","text":"SumCosGaussian( dims, n_cos, n_gaussians, k, α, σ, μ, δ )\n\nData type for parameters of initial distribution\n\n(1+ sum_i=1^n_cos alpha_i cos(  k_i mathbfx))\ncdot\nsum_j=1^n_gaussians \ndelta_j exp \nbig( -frac12 \nfrac(mathbfv-mu_j)^2sigma_j^2 big)\n\nParameters\n\nk : values of the wave numbers (Array of vectors for multiple cosines)\nα : strength of perturbations\nσ : variance of the Gaussian ( Array of vectors for multiple Gaussians)\nμ : mean value of the Gaussian ( Array multiple Gaussians)\nnormal : Normalization constant of each Gaussian\nn_gaussians : Number of Gaussians\nn_cos : Number of cosines\nδ : portion of each Gaussian \n\nExample\n\nf(xv_1v_2) = frac12pisigma_1sigma_2 \nexp Big( - frac12 big( fracv_1^2sigma_1^2\n + fracv_2^2sigma_2^2 big) Big) \n( 1 + alpha_1 cos(k_1 x) + alpha_2 cos(k_2 x) )\n\ndf = SumCosGaussian{1,2}([[k₁],[k₂]], [α₁, α₂], [[σ₁,σ₂]], [[0.0,0.0]])\n\n\n\n\n\n\n","category":"type"},{"location":"distributions/#GEMPIC.eval_v_density-Tuple{GEMPIC.AbstractCosGaussian, Union{Float64, Vector{Float64}}}","page":"Distributions","title":"GEMPIC.eval_v_density","text":"eval_v_density( f, v )\n\nevaluate the normal part of the distribution function\n\n\n\n\n\n","category":"method"},{"location":"distributions/#GEMPIC.eval_x_density-Tuple{SumCosGaussian, Union{Float64, Vector{Float64}}}","page":"Distributions","title":"GEMPIC.eval_x_density","text":"eval_x_density( f, x )\n\nevaluate the cosine part of the distribution function\n\n\n\n\n\n","category":"method"},{"location":"particle_mesh_coupling/#Particle-Mesh-coupling","page":"Particle-Mesh coupling","title":"Particle-Mesh coupling","text":"","category":"section"},{"location":"particle_mesh_coupling/","page":"Particle-Mesh coupling","title":"Particle-Mesh coupling","text":"Modules = [GEMPIC]\nPages   = [\"particle_mesh_coupling_1d.jl\", \"particle_mesh_coupling_2d.jl\"]","category":"page"},{"location":"particle_mesh_coupling/#GEMPIC.ParticleMeshCoupling1D","page":"Particle-Mesh coupling","title":"GEMPIC.ParticleMeshCoupling1D","text":"ParticleMeshCoupling1D( mesh, no_particles, spline_degree, \n                      smoothing_type )\n\nKernel smoother with splines of arbitrary degree placed on a uniform mesh. Spline with index i starts at point i\n\ndelta_x : Value of grid spacing along both directions.\nn_grid : Array containing number ofpoints along each direction\nno_particles : Number of particles of underlying PIC method \nspline_degree : Degree of smoothing kernel spline\nn_span : Number of intervals where spline non zero (spline_degree + 1)\nscaling : Scaling factor depending on whether :galerkin or :collocation\nn_quad_points : Number of quadrature points\nspline_val: scratch data for spline evaluation\nspline_val_more : more scratch data for spline evaluation\nquad_x, quad_w : quadrature weights and points\n\nnote: Note\nOnly 1D version is implemented for now\n\n\n\n\n\n","category":"type"},{"location":"particle_mesh_coupling/#GEMPIC.add_charge!-Tuple{Vector{Float64}, ParticleMeshCoupling1D, Float64, Float64}","page":"Particle-Mesh coupling","title":"GEMPIC.add_charge!","text":"add_charge!( rho, p, position, marker_charge)\n\nAdd charge of one particle\n\np             : kernel smoother object\nposition      : Position of the particle\nmarker_charge : Particle weights time charge\nrho_dofs      : Coefficient vector of the charge distribution\n\n\n\n\n\n","category":"method"},{"location":"particle_mesh_coupling/#GEMPIC.add_charge_pp!-Tuple{Vector{Float64}, ParticleMeshCoupling1D, Float64, Any}","page":"Particle-Mesh coupling","title":"GEMPIC.add_charge_pp!","text":"add_charge_pp!(rho_dofs, p, position, marker_charge)\n\nAdd charge of one particle\n\np             : kernel smoother object\nposition      : Position of the particle\nmarker_charge : Particle weights time charge\nrho_dofs      : Coefficient vector of the charge distribution\n\n\n\n\n\n","category":"method"},{"location":"particle_mesh_coupling/#GEMPIC.add_current_update_v!-Tuple{AbstractArray, ParticleMeshCoupling1D, Float64, Float64, Float64, Float64, Vector{Float64}, Float64}","page":"Particle-Mesh coupling","title":"GEMPIC.add_current_update_v!","text":"add_current_update_v!( j_dofs, p, \n                       position_old, position_new, \n                       marker_charge, qoverm, \n                       bfield_dofs, vi)\n\nAdd current for one particle and update v (according to H_p1 part in Hamiltonian splitting)\n\nRead out particle position and velocity\nCompute index_old, the index of the last DoF on the grid the \n\nparticle contributes to, and r_old, its position (normalized to cell size one).\n\n\n\n\n\n","category":"method"},{"location":"particle_mesh_coupling/#GEMPIC.add_current_update_v!-Tuple{AbstractArray, ParticleMeshCoupling1D, Vararg{Float64, 5}}","page":"Particle-Mesh coupling","title":"GEMPIC.add_current_update_v!","text":"add_current_update_v!( j_dofs, p, \n                       position_old, position_new, \n                       marker_charge, qoverm, vi)\n\nAdd current for one particle and update v (according to H_p1 part in Hamiltonian splitting)\n\nThis is the 1d1v case, there is no magnetic field.\n\nRead out particle position and velocity\nCompute index_old, the index of the last DoF on the grid the \n\nparticle contributes to, and r_old, its position (normalized to cell size one).\n\n\n\n\n\n","category":"method"},{"location":"particle_mesh_coupling/#GEMPIC.add_current_update_v_pp!-Tuple{AbstractArray, ParticleMeshCoupling1D, Any, Any, Float64, Float64, Vector{Float64}, Vector{Float64}}","page":"Particle-Mesh coupling","title":"GEMPIC.add_current_update_v_pp!","text":"add_current_update_v_pp!( j_dofs, p, position_old, position_new, \n                          marker_charge, qoverm, bfield_dofs, vi)\n\nAdd current for one particle and update v  (according to H_p1 part in Hamiltonian splitting)\n\n\n\n\n\n","category":"method"},{"location":"particle_mesh_coupling/#GEMPIC.evaluate-Tuple{ParticleMeshCoupling1D, Float64, Vector{Float64}}","page":"Particle-Mesh coupling","title":"GEMPIC.evaluate","text":"evaluate(p, position, field_dofs)\n\nEvaluate field at position\n\np : Kernel smoother object \nposition : Position of the particle\nfield_dofs : Coefficient vector for the field DoFs\nfield_value : Value(s) of the electric fields at given position\n\n\n\n\n\n","category":"method"},{"location":"particle_mesh_coupling/#GEMPIC.evaluate_pp-Tuple{ParticleMeshCoupling1D, Float64, Matrix{Float64}}","page":"Particle-Mesh coupling","title":"GEMPIC.evaluate_pp","text":"evaluate_pp(p, position, field_dofs_pp)\n\nEvaluate field at position using horner scheme\n\np : Kernel smoother object \nposition : Position of the particle\nfield_dofs_pp : Degrees of freedom in kernel representation.\nfield_value : Value(s) of the electric fields at given position\n\n\n\n\n\n","category":"method"},{"location":"particle_mesh_coupling/#GEMPIC.update_jv!-Tuple{AbstractArray, ParticleMeshCoupling1D, Float64, Float64, Int64, Float64, Float64, Float64, Float64, Vector{Float64}}","page":"Particle-Mesh coupling","title":"GEMPIC.update_jv!","text":"update_jv!(j_dofs, p, \n           lower, upper, index, marker_charge, \n           qoverm, sign, vi, bfield_dofs)\n\nHelper function for add_current_update_v.\n\n\n\n\n\n","category":"method"},{"location":"particle_mesh_coupling/#GEMPIC.update_jv!-Tuple{AbstractArray, ParticleMeshCoupling1D, Float64, Float64, Int64, Vararg{Float64, 4}}","page":"Particle-Mesh coupling","title":"GEMPIC.update_jv!","text":"update_jv!(j_dofs, p, \n           lower, upper, index, marker_charge, \n           qoverm, sign, vi)\n\nHelper function for add_current_update_v without the magnetic field (1d1v case)\n\n\n\n\n\n","category":"method"},{"location":"particle_mesh_coupling/#GEMPIC.update_jv_pp!-Tuple{AbstractArray, ParticleMeshCoupling1D, Float64, Float64, Int64, Float64, Float64, Float64, Vector{Float64}}","page":"Particle-Mesh coupling","title":"GEMPIC.update_jv_pp!","text":"update_jv_pp!( j_dofs, p, lower, upper, index, marker_charge, \n               qoverm, vi, bfield_dofs)\n\nHelper function for add_current_update_v.\n\n\n\n\n\n","category":"method"},{"location":"particle_mesh_coupling/#GEMPIC.ParticleMeshCoupling2D","page":"Particle-Mesh coupling","title":"GEMPIC.ParticleMeshCoupling2D","text":"ParticleMeshCoupling2D( pg, grid, degree, smoothing_type)\n\nn_grid(2) : no. of spline coefficients\ndomain(2,2) : lower and upper bounds of the domain\nno_particles : no. of particles\ndegree : Degree of smoothing kernel spline\nsmoothing_type : Define if Galerkin or collocation smoothing for right scaling in accumulation routines \n\n\n\n\n\n","category":"type"},{"location":"particle_mesh_coupling/#GEMPIC.add_charge!-Tuple{Any, ParticleMeshCoupling2D, Any, Any, Any}","page":"Particle-Mesh coupling","title":"GEMPIC.add_charge!","text":"add_charge!(ρ_dofs, pm, xp, yp, wp)\n\nAdd charge of single particle\n\nposition : Particle position\nwp : Particle weight times charge\nρ_dofs : spline coefficient of accumulated density\n\n\n\n\n\n","category":"method"},{"location":"particle_mesh_coupling/#GEMPIC.add_charge_pp!-Tuple{Any, ParticleMeshCoupling2D, Any, Any, Any}","page":"Particle-Mesh coupling","title":"GEMPIC.add_charge_pp!","text":"add_charge_pp!(ρ_dofs, pm, xp, yp, wp)\n\nAdd charge of single particle\n\nInformation about the 2d mesh\ndelta_x(2)  : Value of grid spacing along both directions.\ndomain(2,2) : Definition of the domain: domain(1,1) = x1min, domain(2,1) = x2min,  domain(1,2) = x1max, domain(2,2) = x2max\nInformation about the particles\nno_particles : Number of particles of underlying PIC method (processor local)\nn_span : Number of intervals where spline non zero (degree + 1)\nscaling\nposition : Particle position\nwp : Particle weight times charge\nρ_dofs : spline coefficient of accumulated density\n\n\n\n\n\n","category":"method"},{"location":"particle_mesh_coupling/#GEMPIC.compute_shape_factor-Tuple{ParticleMeshCoupling2D, Any, Any}","page":"Particle-Mesh coupling","title":"GEMPIC.compute_shape_factor","text":"compute_shape_factor(pm, xp, yp)\n\nHelper function computing shape factor\n\npm : kernel smoother object\nxp, xp : poisition of the particle\n\n\n\n\n\n","category":"method"},{"location":"particle_mesh_coupling/#GEMPIC.evaluate-NTuple{4, Any}","page":"Particle-Mesh coupling","title":"GEMPIC.evaluate","text":"evaluate(pm, xp, yp, field_dofs)\n\nposition(pm.dim) : Position where to evaluate\nfielddofs(pm.ndofs) : Degrees of freedom in kernel representation.\nfield_value : Value of the field\n\nEvaluate field with given dofs at position\n\n\n\n\n\n","category":"method"},{"location":"particle_mesh_coupling/#GEMPIC.evaluate_multiple-Tuple{Any, Any, Any}","page":"Particle-Mesh coupling","title":"GEMPIC.evaluate_multiple","text":"evaluate_multiple(pm, position, field_dofs)\n\nEvaluate multiple fields at position \u0007 position\n\nposition(pm%dim) : Position where to evaluate\ncomponents(:) : Components of the field that shall be evaluated\nfield_dofs(:,:) : Degrees of freedom in kernel representation.\nfield_value(:) : Value of the field\n\n\n\n\n\n","category":"method"},{"location":"particle_mesh_coupling/#GEMPIC.evaluate_pp-Tuple{ParticleMeshCoupling2D, Any, Any, Any}","page":"Particle-Mesh coupling","title":"GEMPIC.evaluate_pp","text":"evaluate_pp(pm, xp, yp, pp)\n\nEvaluate field at position using horner scheme\n\npm : kernel smoother object    \nposition : Position where to evaluate\nfielddofspp(:,:) : Degrees of freedom in kernel representation.\nfield_value : Value of the field\n\n\n\n\n\n","category":"method"},{"location":"particle_mesh_coupling/#GEMPIC.index_1dto2d_column_major-Tuple{Any, Any, Any}","page":"Particle-Mesh coupling","title":"GEMPIC.index_1dto2d_column_major","text":"index_1dto2d_column_major(pm, index1d_1, index_1d_2)\n\nSelf function computes the index of a 1D array that stores 2D data in column major ordering.  It also takes periodic boundary conditions into account.\n\nindex1d_1 !< indice along x (start counting with zero).\nindex1d_2 !< indice along y (start counting with zero).\nindex2d   !< Corresponding index in 1d array representing 2d data (start counting with one).\n\n\n\n\n\n","category":"method"},{"location":"splinepp/#Periodic-spline","page":"Periodic spline","title":"Periodic spline","text":"","category":"section"},{"location":"splinepp/","page":"Periodic spline","title":"Periodic spline","text":"Modules = [GEMPIC]\nPages   = [\"splinepp.jl\"]","category":"page"},{"location":"splinepp/#GEMPIC.SplinePP","page":"Periodic spline","title":"GEMPIC.SplinePP","text":"SplinePP( degree, ncells)\n\ndegree : degree of 1d spline\npoly_coeffs : poly_coeffs[i,j] coefficient of x^deg+1-j for ith B-spline function  size= (degree+1, degree+1)\npoly_coeffs_fp : poly_coeffs[i,j] coefficient of x^deg+1-j for ith B-spline function  size= (degree+1, degree+1)\nncells : number of gridcells\nscratch_b : scratch data for b_to_pp-converting\nscratch_p : scratch data for b_to_pp-converting\n\n\n\n\n\n","category":"type"},{"location":"splinepp/#GEMPIC.b_to_pp-Tuple{GEMPIC.SplinePP, Int64, Vector{Float64}}","page":"Periodic spline","title":"GEMPIC.b_to_pp","text":"b_to_pp( SplinePP, ncells, b_coeffs)\n\nConvert 1d spline in B form to spline in pp form with  periodic boundary conditions\n\n\n\n\n\n","category":"method"},{"location":"splinepp/#GEMPIC.b_to_pp_1d_cell!-Tuple{Any, Any, Any}","page":"Periodic spline","title":"GEMPIC.b_to_pp_1d_cell!","text":"b_to_pp_1d_cell( self, b_coeffs, pp_coeffs )\n\nConvert 1d spline in B form in a cell to spline in pp form with periodic boundary conditions\n\nspline : arbitrary degree 1d spline \nb_coeffs(self%degree+1) : coefficients of spline in B-form\npp_coeffs(self%degree+1) : coefficients of spline in pp-form\n\n\n\n\n\n","category":"method"},{"location":"splinepp/#GEMPIC.b_to_pp_2d!-Tuple{Any, GEMPIC.SplinePP, GEMPIC.SplinePP, Any}","page":"Periodic spline","title":"GEMPIC.b_to_pp_2d!","text":"b_to_pp_2d!( pp, spl1, spl2, b)\n\nConvert 2d spline in B form to spline in pp form   \n\nn_cells(2) : number of gridcells\nb_coeffs   : coefficients of spline in B-form\npp_coeffs  : coefficients of spline in pp-form\n\n\n\n\n\n","category":"method"},{"location":"splinepp/#GEMPIC.b_to_pp_2d_cell!-Tuple{Any, GEMPIC.SplinePP, GEMPIC.SplinePP, Any, Any, Any}","page":"Periodic spline","title":"GEMPIC.b_to_pp_2d_cell!","text":"b_to_pp_2d_cell(spline1, spline2, b_coeffs, pp_coeffs, i, j)\n\nConvert 2d spline in B form in a cell to spline in pp form with periodic boundary conditions \n\nspline1 : arbitrary degree 1d spline\nspline2 : arbitrary degree 1d spline\nn_cells(2) : number of gridcells\nbcoeffs(ncells(1)*n_cells(2)) : coefficients of spline in B-form\nppcoeffs((spline1.degree+1)*(spline2.degree+1),ncells(1)*n_cells(2)) : coefficients of spline in pp-form\n\n\n\n\n\n","category":"method"},{"location":"splinepp/#GEMPIC.horner_1d-Tuple{Int64, Any, Float64, Int64}","page":"Periodic spline","title":"GEMPIC.horner_1d","text":"horner_1d(degree, pp_coeffs, x, index)\n\nPerform a 1d Horner schema on the pp_coeffs at index\n\n\n\n\n\n","category":"method"},{"location":"splinepp/#GEMPIC.horner_2d-NTuple{5, Any}","page":"Periodic spline","title":"GEMPIC.horner_2d","text":"horner_2d(degrees, pp_coeffs, position, indices, ncells)\n\nPerform a 2d hornerschema on the pp_coeffs at the indices\n\ndegree : degree of the spline\npp_coeffs : coefficients of spline in pp-form\nposition(2) : point at which we evaluate our spline\nindices(2) : indices of cell in which is x\nncells(2) : number of gridcells\nres : value of the splinefunction at position\n\n\n\n\n\n","category":"method"},{"location":"splinepp/#GEMPIC.horner_m_2d!-Tuple{Any, GEMPIC.SplinePP, GEMPIC.SplinePP, Any, Any, Any}","page":"Periodic spline","title":"GEMPIC.horner_m_2d!","text":"horner_m_2d!(val, spl1, spl2, degree, x)\n\nPerform two times a 1d hornerschema on the poly_coeffs\n\nval : array of values\ndegree : degree of the spline\nx : point at which we evaluate our spline\n\n\n\n\n\n","category":"method"},{"location":"splinepp/#GEMPIC.horner_primitive_1d-Tuple{Vector{Float64}, Any, Any, Any}","page":"Periodic spline","title":"GEMPIC.horner_primitive_1d","text":"horner_primitive_1d(val, degree, pp_coeffs, x)\n\nPerform a 1d Horner schema on the pp_coeffs evaluate at x\n\n\n\n\n\n","category":"method"},{"location":"diagnostics/#Diagnostics","page":"Diagnostics","title":"Diagnostics","text":"","category":"section"},{"location":"diagnostics/","page":"Diagnostics","title":"Diagnostics","text":"Modules = [GEMPIC]\nPages   = [\"diagnostics.jl\"]","category":"page"},{"location":"diagnostics/#GEMPIC.TimeHistoryDiagnostics","page":"Diagnostics","title":"GEMPIC.TimeHistoryDiagnostics","text":"TimeHistoryDiagnostics( particle_group, maxwell_solver, \n                        kernel_smoother_0, kernel_smoother_1 )\n\nContext to save and plot diagnostics\n\nparticle_group : Particles data\nmaxwell_solver : Maxwell solver\nkernel_smoother_0 : Mesh coupling operator\nkernel_smoother_1 : Mesh coupling operator\ndata : DataFrame containing time history values\n\n\n\n\n\n","category":"type"},{"location":"diagnostics/#GEMPIC.eval_derivative_spline-NTuple{6, Any}","page":"Diagnostics","title":"GEMPIC.eval_derivative_spline","text":"eval_derivative_spline( position, xmin, delta_x, n_grid, \n                        field_dofs, degree, derivative )\n\nCompute the spline coefficient of the derivative of some given spline expansion\n\nposition : particle position\nxmin : lower boundary of the domain\ndelta_x : step \nn_grid : number of grid points\nfield_dofs : coefficients of spline representation of the field\ndegree : degree of spline\nderivative : value of the derivative\n\n\n\n\n\n","category":"method"},{"location":"diagnostics/#GEMPIC.evaluate-Tuple{ParticleMeshCoupling1D, AbstractArray, AbstractArray}","page":"Diagnostics","title":"GEMPIC.evaluate","text":"evaluate( kernel_smoother, field_dofs,  xi, n_dofs )\n\nEvaluate the field at points xi\n\nfield_dofs : field value on dofs\nxi : positions where the field is evaluated\n\n\n\n\n\n","category":"method"},{"location":"diagnostics/#GEMPIC.pic_diagnostics_hpi-Tuple{Any, Any, Any}","page":"Diagnostics","title":"GEMPIC.pic_diagnostics_hpi","text":"pic_diagnostics_hpi( particle_group,  index, kinetic )\n\ncompute v(index)-part of kinetic energy\n\nparticle_group \nindex : velocity component\nkinetic : value of index part of kinetic energy\n\n\n\n\n\n","category":"method"},{"location":"diagnostics/#GEMPIC.pic_diagnostics_poynting-NTuple{4, Any}","page":"Diagnostics","title":"GEMPIC.pic_diagnostics_poynting","text":"pic_diagnostics_poynting( maxwell_solver, degree, efield_dofs, bfield_dofs, \n                          rho )\n\nCompute e^T M_0^-1  R^T b\n\nmaxwell_solver : maxwell solver object\ndegree : degree of finite element\nefield_dofs : coefficients of efield\nbfield_dofs : coefficients of bfield\n\n\n\n\n\n","category":"method"},{"location":"diagnostics/#GEMPIC.pic_diagnostics_transfer-Tuple{ParticleGroup{1, 2}, Any, Any, Any}","page":"Diagnostics","title":"GEMPIC.pic_diagnostics_transfer","text":"pic_diagnostics_transfer( particle_group, kernel_smoother_0, \n                        kernel_smoother_1, efield_dofs, transfer)\n\nCompute sum_particles w_p ( v_1p e_1(x_p) + v_2p e_2(x_p))\n\nparticle_group   \nkernel_smoother_0  : Kernel smoother (order p+1)\nkernel_smoother_1  : Kernel smoother (order p)   \nefield_dofs : coefficients of efield\n\n\n\n\n\n","category":"method"},{"location":"diagnostics/#GEMPIC.pic_diagnostics_vvb-Tuple{Any, Any, Any}","page":"Diagnostics","title":"GEMPIC.pic_diagnostics_vvb","text":"pic_diagnostics_vvb( particle_group, kernel_smoother_1, bfield_dofs )\n\nCompute sum_particles ( w_p v_1 p b(x_p) v_2 p )\n\nparticle_group    : particle group object\nkernel_smoother_1 : Kernel smoother (order p)  \nbfield_dofs : coefficients of bfield\n\n\n\n\n\n","category":"method"},{"location":"diagnostics/#GEMPIC.solve_poisson!-Tuple{Vector{Float64}, GEMPIC.AbstractParticleGroup, GEMPIC.AbstractParticleMeshCoupling, Maxwell1DFEM, Vector{Float64}}","page":"Diagnostics","title":"GEMPIC.solve_poisson!","text":"solvepoisson!( efield, particlegroup, kernelsmoother, maxwellsolver, rho )\n\nAccumulate rho and solve Poisson\n\nparticle_group : Particles\nmaxwell_solver : Maxwell solver (FEM 1D)\nkernel_smoother_0 : Particle-Mesh method\nrho : preallocated array for Charge density\nefield_dofs : spline coefficients of electric field (1D)\n\n\n\n\n\n","category":"method"},{"location":"diagnostics/#GEMPIC.write_step!-Tuple{TimeHistoryDiagnostics, Vararg{Any, 6}}","page":"Diagnostics","title":"GEMPIC.write_step!","text":"write_step!( thdiag, time, degree, efield_dofs, bfield_dofs,\n             efield_dofs_n, efield_poisson)\n\nwrite diagnostics for PIC\n\ntime : Time\nefield_dofs : Electric field\nefield_dofs_n : Electric field at half step\nefield_poisson : Electric field compute from Poisson equation\nbfield_dofs : Magnetic field\ndegree : Spline degree\n\n\n\n\n\n","category":"method"},{"location":"maxwell_solver/#Maxwell-solver","page":"Maxwell solver","title":"Maxwell solver","text":"","category":"section"},{"location":"maxwell_solver/","page":"Maxwell solver","title":"Maxwell solver","text":"Modules = [GEMPIC]\nPages   = [\"maxwell_1d_fem.jl\"]","category":"page"},{"location":"maxwell_solver/#GEMPIC.Maxwell1DFEM","page":"Maxwell solver","title":"GEMPIC.Maxwell1DFEM","text":"maxwell_solver = MaxwellFEM1D( mesh, degree )\n\n1D Maxwell spline finite element solver on a periodic grid\n\nLx                   : length of Periodic domain\ndelta_x              : cell size\nn_dofs               : number of cells (and grid points)\ns_deg_0              : spline degree 0-forms\ns_deg_1              : spline degree 1-forms\nmass_0               : coefficients of 0-form mass matrix\nmass_1               : coefficients of 1-form mass matrix\neig_mass0            : eigenvalues of circulant 0-form mass matrix\neig_mass1            : eigenvalues of circulant 1-form mass matrix\neig_weak_ampere      : eigenvalues of circulant update matrix for Ampere\neig_weak_poisson     : eigenvalues of circulant update matrix for Poisson\nplan_fw              : fft plan (forward)\nplan_bw              : fft plan (backward)\n\n\n\n\n\n","category":"type"},{"location":"maxwell_solver/#GEMPIC.compute_b_from_e!-Tuple{Vector{Float64}, Maxwell1DFEM, Float64, Vector{Float64}}","page":"Maxwell solver","title":"GEMPIC.compute_b_from_e!","text":"compute_b_from_e!( field_out, maxwell_solver, delta_t, field_in)\n\nCompute Bz from Ey using strong 1D Faraday equation for spline coefficients\n\nB_z^new(x_j) = B_z^old(x_j) - fracDelta tDelta x (E_y(x_j) - E_y(x_j-1)\n\n\n\n\n\n","category":"method"},{"location":"maxwell_solver/#GEMPIC.compute_e_from_b!-Tuple{Vector{Float64}, Maxwell1DFEM, Float64, Vector{Float64}}","page":"Maxwell solver","title":"GEMPIC.compute_e_from_b!","text":"compute_e_from_b!(field_out, maxwell_solver, delta_t, field_in)\n\ncompute Ey from Bz using weak Ampere formulation \n\n\n\n\n\n","category":"method"},{"location":"maxwell_solver/#GEMPIC.compute_e_from_j!-Tuple{Vector{Float64}, Maxwell1DFEM, Vector{Float64}, Int64}","page":"Maxwell solver","title":"GEMPIC.compute_e_from_j!","text":"compute_e_from_j!(e, maxwell_solver, current, component)\n\nCompute E_i from j_i integrated over the time interval using weak Ampere formulation\n\n\n\n\n\n","category":"method"},{"location":"maxwell_solver/#GEMPIC.compute_rhs_from_function!-Tuple{Vector{Float64}, Maxwell1DFEM, Function, Int64}","page":"Maxwell solver","title":"GEMPIC.compute_rhs_from_function!","text":"computerhsfromfunction(self, func, degree, coefsdofs)\n\nCompute the FEM right-hand-side for a given function f and periodic splines of given degree.\n\nIts components are int f N_i dx where N_i is the B-spline starting at x_i. \n\n\n\n\n\n","category":"method"},{"location":"maxwell_solver/#GEMPIC.inner_product-NTuple{4, Any}","page":"Maxwell solver","title":"GEMPIC.inner_product","text":"inner_product( maxwell_solver, coefs1_dofs, coefs2_dofs, degree )\n\nmaxwell_solver : Maxwell solver object\ncoefs1_dofs : Coefficient for each DoF\ncoefs2_dofs : Coefficient for each DoF\n`degree : Specify the degree of the basis functions\n\nreturn squared L2 norm\n\n\n\n\n\n","category":"method"},{"location":"maxwell_solver/#GEMPIC.l2norm_squared-Tuple{Any, Any, Any}","page":"Maxwell solver","title":"GEMPIC.l2norm_squared","text":"l2norm_squared(maxwell_solver, coefs_dofs, degree)\n\nCompute square of the L2norm \n\n\n\n\n\n","category":"method"},{"location":"maxwell_solver/#GEMPIC.l2norm_squared2-Tuple{Any, Any, Any}","page":"Maxwell solver","title":"GEMPIC.l2norm_squared2","text":"l2norm_squared(maxwell_solver, coefs_dofs, degree)\n\nCompute square of the L2norm \n\n\n\n\n\n","category":"method"},{"location":"maxwell_solver/#GEMPIC.l2projection!-Tuple{Vector{Float64}, Maxwell1DFEM, Function, Int64}","page":"Maxwell solver","title":"GEMPIC.l2projection!","text":"l2projection!(coefs_dofs, maxwell, func, degree)\n\nCompute the L2 projection of a given function f on periodic splines  of given degree\n\n\n\n\n\n","category":"method"},{"location":"low_level_bsplines/#Splines","page":"Splines","title":"Splines","text":"","category":"section"},{"location":"low_level_bsplines/","page":"Splines","title":"Splines","text":"Modules = [GEMPIC]\nPages   = [\"low_level_bsplines.jl\"]","category":"page"},{"location":"low_level_bsplines/#GEMPIC.eval_uniform_periodic_spline_curve-Tuple{Int64, Vector{Float64}}","page":"Splines","title":"GEMPIC.eval_uniform_periodic_spline_curve","text":"eval_uniform_periodic_spline_curve( degree, scoef )\n\nEvaluate uniform periodic spline curve defined by coefficients scoef at  knots (which are the grid points) \n\n\n\n\n\n","category":"method"},{"location":"low_level_bsplines/#GEMPIC.uniform_bsplines_eval_basis-Tuple{Int64, Float64}","page":"Splines","title":"GEMPIC.uniform_bsplines_eval_basis","text":"uniform_bsplines_eval_basis( spline_degree, normalized_offset, bspl )\n\nUNIFORM B-SPLINE FUNCTIONS\n\nEvaluate all non vanishing uniform B-Splines in unit cell.\n\nReturns an array with the values of the b-splines of the  requested degree, evaluated at a given cell offset. The cell size is normalized between 0 and 1, thus the offset given must be a number between 0 and 1.\n\nOutput: \n\nbspl(1d+1)= B_d(-(d+1)2+d+x)B_d(-(d+1)2+x)\n\nwith d=spline_degree and x=normalized_offset where B_d=B_d-1*B_0 and B_0=1_-1212 and * is convolution the following FORTRAN code can be used for comparison with  deboor\n\ndo i=-d,d+1\n    t(i+d+1)=real(i,8)\nend do\ncall bsplvb(t,d+1,1,normalized_offset,d+1,out)\n\nWe also have the property (from the symmetry of the B-spline)\n\nout1d+1= B_d(-(d+1)2+xx)B_d(-(d+1)2+d+xx) \n\nwhere xx=1- normalized_offset\n\n\n\n\n\n","category":"method"},{"location":"strong_landau_damping/#Strong-Landau-Damping","page":"Strong Landau Damping","title":"Strong Landau Damping","text":"","category":"section"},{"location":"strong_landau_damping/","page":"Strong Landau Damping","title":"Strong Landau Damping","text":"If we only use the subsystems H_p and H_E, we are solving Vlasov–Poisson system. In this test, initial condition is as follows:","category":"page"},{"location":"strong_landau_damping/","page":"Strong Landau Damping","title":"Strong Landau Damping","text":"f_0(xv) = frac1sqrt2pi sigmae^-fracv^22sigma^2(1+alpha cos(kx)) quad E_10 (x) = fracalphaksin(kx)  x in 02pik )   v in mathbbR^2","category":"page"},{"location":"strong_landau_damping/","page":"Strong Landau Damping","title":"Strong Landau Damping","text":"using Plots","category":"page"},{"location":"strong_landau_damping/","page":"Strong Landau Damping","title":"Strong Landau Damping","text":"using GEMPIC","category":"page"},{"location":"strong_landau_damping/","page":"Strong Landau Damping","title":"Strong Landau Damping","text":"The physical parameters are chosen as sigma = 1, k = 05, alpha = 05, and the numerical parameters as Delta t = 005, n_x = 32 and 2 times 10^5 particles. We use second order Strang splitting method in time.","category":"page"},{"location":"strong_landau_damping/","page":"Strong Landau Damping","title":"Strong Landau Damping","text":"σ, μ = 1.0, 0.0\nkx, α = 0.5, 0.5\nxmin, xmax = 0, 2π/kx\n∆t = 0.05\nnx = 32\nn_particles = 100000\nmesh = OneDGrid( xmin, xmax, nx)\nspline_degree = 3\n\ndf = CosSumGaussian{1,2}([[kx]], [α], [[σ,σ]], [[μ,μ]] )\n\nmass, charge = 1.0, 1.0\nparticle_group = ParticleGroup{1,2}(n_particles)\nsampler = ParticleSampler{1,2}( :sobol, true, n_particles)\n\nsample!(particle_group, sampler, df, mesh)\n\nxp = view(particle_group.array, 1, :)\nvp = view(particle_group.array, 2:3, :)\nwp = view(particle_group.array, 4, :);\n\np = plot(layout=(3,1))\nhistogram!(p[1,1], xp, weights=wp, normalize=true, bins = 100, lab = \"\")\nplot!(p[1,1], x-> (1+α*cos(kx*x))/(2π/kx), 0., 2π/kx, lab=\"\")\nhistogram!(p[2,1], vp[1,:], weights=wp, normalize=true, bins = 100, lab = \"\")\nplot!(p[2,1], v-> exp( - v^2 / 2) * 4 / π^2 , -6, 6, lab=\"\")\nhistogram!(p[3,1], vp[2,:], weights=wp, normalize=true, bins = 100, lab = \"\")\nplot!(p[3,1], v-> exp( - v^2 / 2) * 4 / π^2 , -6, 6, lab=\"\")","category":"page"},{"location":"strong_landau_damping/","page":"Strong Landau Damping","title":"Strong Landau Damping","text":"Initialize the arrays for the spline coefficients of the fields","category":"page"},{"location":"strong_landau_damping/","page":"Strong Landau Damping","title":"Strong Landau Damping","text":"kernel_smoother1 = ParticleMeshCoupling1D( mesh, n_particles, spline_degree-1, :galerkin)\nkernel_smoother0 = ParticleMeshCoupling1D( mesh, n_particles, spline_degree, :galerkin)\n","category":"page"},{"location":"strong_landau_damping/#Initialize-field-solver","page":"Strong Landau Damping","title":"Initialize field solver","text":"","category":"section"},{"location":"strong_landau_damping/","page":"Strong Landau Damping","title":"Strong Landau Damping","text":"p = plot(layout=(1,2))\nrho = zeros(Float64, nx)\nefield_poisson = zeros(Float64, nx)\nmaxwell_solver = Maxwell1DFEM(mesh, spline_degree)\nsolve_poisson!( efield_poisson, particle_group, kernel_smoother0, maxwell_solver, rho )\nxg = LinRange(xmin, xmax, nx)\nsval = eval_uniform_periodic_spline_curve(spline_degree-1, rho)\nplot!(p[1,1], xg, sval, title=:rho, label=nothing)\nsval = eval_uniform_periodic_spline_curve(spline_degree-1, efield_poisson)\nplot!(p[1,2], xg, sval, title=:ex, label=nothing )\n","category":"page"},{"location":"strong_landau_damping/#Simulation-function","page":"Strong Landau Damping","title":"Simulation function","text":"","category":"section"},{"location":"strong_landau_damping/","page":"Strong Landau Damping","title":"Strong Landau Damping","text":"You will get better performance if your simulation is inside a function:","category":"page"},{"location":"strong_landau_damping/","page":"Strong Landau Damping","title":"Strong Landau Damping","text":"function run( steps)\n\n    σ, μ = 1.0, 0.0\n    kx, α = 0.5, 0.5\n    xmin, xmax = 0, 2π/kx\n    dt = 0.05\n    nx = 32\n    n_particles = 100000\n    mesh = OneDGrid( xmin, xmax, nx)\n    spline_degree = 3\n\n    df = CosSumGaussian{1,2}([[kx]], [α], [[σ,σ]], [[μ,μ]] )\n\n    mass, charge = 1.0, 1.0\n    particle_group = ParticleGroup{1,2}(n_particles)\n    sampler = ParticleSampler{1,2}( :sobol, true, n_particles)\n\n    sample!(particle_group, sampler, df, mesh)\n\n    kernel_smoother1 = ParticleMeshCoupling1D( mesh, n_particles, spline_degree-1, :galerkin)\n    kernel_smoother0 = ParticleMeshCoupling1D( mesh, n_particles, spline_degree, :galerkin)\n\n    rho = zeros(Float64, nx)\n    efield_poisson = zeros(Float64, nx)\n\n    maxwell_solver = Maxwell1DFEM(mesh, spline_degree)\n\n    solve_poisson!( efield_poisson, particle_group, kernel_smoother0, maxwell_solver, rho )\n\n    efield_dofs = [efield_poisson, zeros(Float64, nx)]\n    bfield_dofs = zeros(Float64, nx)\n\n    propagator = HamiltonianSplitting{1,2}( maxwell_solver,\n                                       kernel_smoother0,\n                                       kernel_smoother1,\n                                       particle_group,\n                                       efield_dofs,\n                                       bfield_dofs)\n\n    efield_dofs_n = propagator.e_dofs\n\n    thdiag = TimeHistoryDiagnostics( particle_group, maxwell_solver,\n                            kernel_smoother0, kernel_smoother1 )\n\n    for j = 1:steps # loop over time\n\n        strang_splitting!(propagator, dt, 1)\n\n        solve_poisson!( efield_poisson, particle_group,\n                        kernel_smoother0, maxwell_solver, rho)\n\n        write_step!(thdiag, j * dt, spline_degree,\n                        efield_dofs,  bfield_dofs,\n                        efield_dofs_n, efield_poisson)\n    end\n\n    return thdiag.data\n\nend","category":"page"},{"location":"strong_landau_damping/","page":"Strong Landau Damping","title":"Strong Landau Damping","text":"@time results = run(1000);\nnothing # hide","category":"page"},{"location":"strong_landau_damping/#Time-evolution-of-electric-energy","page":"Strong Landau Damping","title":"Time evolution of electric energy","text":"","category":"section"},{"location":"strong_landau_damping/","page":"Strong Landau Damping","title":"Strong Landau Damping","text":"plot(results[!,:Time], log.(results[!,:PotentialEnergyE1]))","category":"page"},{"location":"particle_sampling/#Particle-sampling","page":"Particle sampling","title":"Particle sampling","text":"","category":"section"},{"location":"particle_sampling/","page":"Particle sampling","title":"Particle sampling","text":"Modules = [GEMPIC]\nPages   = [\"particle_sampling.jl\"]","category":"page"},{"location":"particle_sampling/#GEMPIC.ParticleSampler","page":"Particle sampling","title":"GEMPIC.ParticleSampler","text":"ParticleSampler{D,V}( sampling_type, symmetric, dims, n_particles)\n\nParticle initializer class with various functions to initialize a particle.\n\nsampling_type : :random or :sobol\nsymmetric : true or false\nn_particles : number of particles\n\n\n\n\n\n","category":"type"},{"location":"particle_sampling/#GEMPIC.newton-Tuple{Any, Any, Any}","page":"Particle sampling","title":"GEMPIC.newton","text":" newton(r, α, k)\n\nFunction to solve P(x) - r = 0 where r in 0 2πk\n\nwhere P is the cdf of f(x) = 1 + α cos(k x)\n\n\n\n\n\n","category":"method"},{"location":"particle_sampling/#GEMPIC.sample!-Tuple{ParticleGroup{1, 1}, Float64, Float64, Float64, OneDGrid}","page":"Particle sampling","title":"GEMPIC.sample!","text":"sample!( pg::ParticleGroup{1,1}, α, k, σ, mesh::OneDGrid)\n\nSampling from a probability distribution to initialize a Landau damping in 1D1V space.\n\nf_0(xvt) = fracn_0sqrt2π v_th ( 1 + alpha cos(k_x x)) exp( - fracv^22 v_th^2)\n\n\n\n\n\n","category":"method"},{"location":"particle_sampling/#GEMPIC.sample!-Tuple{ParticleGroup{1, 2}, Float64, Float64, Float64, OneDGrid}","page":"Particle sampling","title":"GEMPIC.sample!","text":"sample!( pg::ParticleGroup{2,1}, α, k, σ, mesh::OneDGrid)\n\nSampling from a probability distribution to initialize a Landau damping in 1D1V space.\n\nf_0(xvt) = fracn_02π v_th^2 ( 1 + alpha cos(k_x x)) exp( - fracv^22 v_th^2)\n\n\n\n\n\n","category":"method"},{"location":"particle_sampling/#GEMPIC.sample!-Tuple{ParticleGroup{1, 2}, ParticleSampler, GEMPIC.AbstractCosGaussian, GEMPIC.AbstractGrid}","page":"Particle sampling","title":"GEMPIC.sample!","text":"sample!( pg, ps, df, mesh)\n\nSample from a Particle sampler\n\npg   : Particle group\nps   : Particle sampler\ndf   : Distribution function\nxmin : lower bound of the domain\ndimx : length of the domain.\n\n\n\n\n\n","category":"method"},{"location":"particle_sampling/#GEMPIC.sample_all-Tuple{Any, ParticleGroup{1, 2}, GEMPIC.AbstractCosGaussian, Any}","page":"Particle sampling","title":"GEMPIC.sample_all","text":"sample_all( ps, pg, df, mesh )\n\nHelper function for pure sampling\n\n\n\n\n\n","category":"method"},{"location":"particle_sampling/#GEMPIC.sample_sym-NTuple{4, Any}","page":"Particle sampling","title":"GEMPIC.sample_sym","text":"sample_sym( ps, pg, df, mesh )\n\nHelper function for antithetic sampling in 1d2v\n\n\n\n\n\n","category":"method"},{"location":"particle_sampling/#Special-case-of-the-Landau-Damping","page":"Particle sampling","title":"Special case of the Landau Damping","text":"","category":"section"},{"location":"particle_sampling/","page":"Particle sampling","title":"Particle sampling","text":"Modules = [GEMPIC]\nPages   = [\"landau_damping.jl\"]","category":"page"},{"location":"particle_sampling/#GEMPIC.LandauDamping","page":"Particle sampling","title":"GEMPIC.LandauDamping","text":"Landau( α, kx)\n\nTest structure to initialize a particles distribtion for Landau damping test case in 1D1V and 1D2V\n\n\n\n\n\n","category":"type"},{"location":"particle_sampling/#GEMPIC.sample!-Tuple{GEMPIC.LandauDamping, ParticleGroup{1, 2}}","page":"Particle sampling","title":"GEMPIC.sample!","text":"sample!(d, pg)\n\nSampling from a probability distribution to initialize a Landau damping in 1D2V space.\n\nf_0(xvt) = fracn_02π v_th^2 ( 1 + alpha cos(k_x x))\n exp( - fracv_x^2+v_y^22 v_th^2)\n\nThe newton function solves the equation P(x)-r=0 with Newton’s method\n\nx^n+1 = x^n  (P(x)-(2pi r  k)f(x) \n\nwith \n\nP(x) = int_0^x (1 + alpha cos(k_x y)) dy = x + fracalphak_x sin(k_x x)\n\n\n\n\n\n","category":"method"},{"location":"hamiltonian_splitting/#Hamiltonian-splitting","page":"Hamiltonian splitting","title":"Hamiltonian splitting","text":"","category":"section"},{"location":"hamiltonian_splitting/","page":"Hamiltonian splitting","title":"Hamiltonian splitting","text":"Modules = [GEMPIC]\nPages   = [\"hamiltonian_splitting.jl\"]","category":"page"},{"location":"hamiltonian_splitting/#GEMPIC.HamiltonianSplitting","page":"Hamiltonian splitting","title":"GEMPIC.HamiltonianSplitting","text":"HamiltonianSplitting( maxwell_solver,\n                      kernel_smoother_0, kernel_smoother_1,\n                      particle_group, e_dofs, b_dofs)\n\nHamiltonian splitting type for Vlasov-Maxwell\n\nIntegral over the spline function on each interval (order p+1)\nIntegral over the spline function on each interval (order p)\ne_dofs describing the two components of the electric field\nb_dofs describing the magnetic field\nj_dofs for kernel representation of current density. \n\n\n\n\n\n","category":"type"},{"location":"hamiltonian_splitting/#GEMPIC.lie_splitting!-Tuple{HamiltonianSplitting, Float64, Int64}","page":"Hamiltonian splitting","title":"GEMPIC.lie_splitting!","text":"lie_splitting( h, dt, number_steps)\n\nLie splitting\n\n\n\n\n\n","category":"method"},{"location":"hamiltonian_splitting/#GEMPIC.lie_splitting_back!-Tuple{HamiltonianSplitting, Float64, Int64}","page":"Hamiltonian splitting","title":"GEMPIC.lie_splitting_back!","text":"lie_splitting_back(h, dt, number_steps)\n\nLie splitting (oposite ordering)\n\n\n\n\n\n","category":"method"},{"location":"hamiltonian_splitting/#GEMPIC.strang_splitting!-Tuple{HamiltonianSplitting, Float64, Int64}","page":"Hamiltonian splitting","title":"GEMPIC.strang_splitting!","text":"strang_splitting( h, dt, number_steps)\n\nStrang splitting\n\ntime splitting object \ntime step\nnumber of time steps\n\n\n\n\n\n","category":"method"},{"location":"particle_group/#Particle-group","page":"Particle group","title":"Particle group","text":"","category":"section"},{"location":"particle_group/","page":"Particle group","title":"Particle group","text":"Modules = [GEMPIC]\nPages   = [\"particle_group.jl\"]","category":"page"},{"location":"particle_group/#GEMPIC.ParticleGroup","page":"Particle group","title":"GEMPIC.ParticleGroup","text":"ParticleGroup{D,V}( n_particles, charge, mass, q, weights)\n\nn_particles : number of particles \ncharge      : charge of the particle species\nmass        : mass of the particle species\nn_weights   : number of differents weights\n\n\n\n\n\n","category":"type"},{"location":"particle_group/#GEMPIC.get_charge-Union{Tuple{V}, Tuple{D}, Tuple{ParticleGroup{D, V}, Int64}} where {D, V}","page":"Particle group","title":"GEMPIC.get_charge","text":"get_charge( p, i; i_wi=1)\n\nGet charge of ith particle of p (q * particle_weight)\n\n\n\n\n\n","category":"method"},{"location":"particle_group/#GEMPIC.get_mass-Union{Tuple{V}, Tuple{D}, Tuple{ParticleGroup{D, V}, Int64}} where {D, V}","page":"Particle group","title":"GEMPIC.get_mass","text":"get_mass( p, i; i_wi=1)\n\nGet mass of ith particle of p (m * particle_weight)\n\n\n\n\n\n","category":"method"},{"location":"particle_group/#GEMPIC.get_v-Union{Tuple{V}, Tuple{D}, Tuple{ParticleGroup{D, V}, Int64}} where {D, V}","page":"Particle group","title":"GEMPIC.get_v","text":"get_v( p, i )\n\nGet velocity of ith particle of p\n\n\n\n\n\n","category":"method"},{"location":"particle_group/#GEMPIC.get_weights-Union{Tuple{V}, Tuple{D}, Tuple{ParticleGroup{D, V}, Int64}} where {D, V}","page":"Particle group","title":"GEMPIC.get_weights","text":"get_weights( p, i)\n\nGet ith particle weights of group p\n\n\n\n\n\n","category":"method"},{"location":"particle_group/#GEMPIC.get_x-Union{Tuple{V}, Tuple{D}, Tuple{ParticleGroup{D, V}, Int64}} where {D, V}","page":"Particle group","title":"GEMPIC.get_x","text":"get_x( p, i )\n\nGet position of ith particle of p\n\n\n\n\n\n","category":"method"},{"location":"particle_group/#GEMPIC.set_v!-Union{Tuple{V}, Tuple{D}, Tuple{ParticleGroup{D, V}, Int64, Float64}} where {D, V}","page":"Particle group","title":"GEMPIC.set_v!","text":"set_v!( p, i, v)\n\nSet velocity of ith particle of p to v\n\n\n\n\n\n","category":"method"},{"location":"particle_group/#GEMPIC.set_v!-Union{Tuple{V}, Tuple{D}, Tuple{ParticleGroup{D, V}, Int64, Vector{Float64}}} where {D, V}","page":"Particle group","title":"GEMPIC.set_v!","text":"set_v!( p, i, v)\n\nSet velocity of ith particle of p to v\n\n\n\n\n\n","category":"method"},{"location":"particle_group/#GEMPIC.set_weights!-Union{Tuple{V}, Tuple{D}, Tuple{ParticleGroup{D, V}, Int64, Float64}} where {D, V}","page":"Particle group","title":"GEMPIC.set_weights!","text":"set_weights!( p, i, w)\n\nSet weights of particle @ i\n\n\n\n\n\n","category":"method"},{"location":"particle_group/#GEMPIC.set_weights!-Union{Tuple{V}, Tuple{D}, Tuple{ParticleGroup{D, V}, Int64, Vector{Float64}}} where {D, V}","page":"Particle group","title":"GEMPIC.set_weights!","text":"set_weights!( p, i, w)\n\nSet weights of ith particle of p to w\n\n\n\n\n\n","category":"method"},{"location":"particle_group/#GEMPIC.set_x!-Union{Tuple{V}, Tuple{D}, Tuple{ParticleGroup{D, V}, Int64, Float64}} where {D, V}","page":"Particle group","title":"GEMPIC.set_x!","text":"set_x!( p, i, x)\n\nSet position of ith particle of p to x\n\nnote: Note\nif x is a scalar value, only the first x dimension will be set.\n\n\n\n\n\n","category":"method"},{"location":"particle_group/#GEMPIC.set_x!-Union{Tuple{V}, Tuple{D}, Tuple{ParticleGroup{D, V}, Int64, Vector{Float64}}} where {D, V}","page":"Particle group","title":"GEMPIC.set_x!","text":"set_x!( p, i, x )\n\nSet position of ith particle of p to x \n\n\n\n\n\n","category":"method"},{"location":"hamiltonian_splitting_boris/#Hamiltonian-splitting-Boris","page":"Hamiltonian splitting Boris","title":"Hamiltonian splitting Boris","text":"","category":"section"},{"location":"hamiltonian_splitting_boris/","page":"Hamiltonian splitting Boris","title":"Hamiltonian splitting Boris","text":"Modules = [GEMPIC]\nPages   = [\"hamiltonian_splitting_boris.jl\"]","category":"page"},{"location":"hamiltonian_splitting_boris/#GEMPIC.HamiltonianSplittingBoris","page":"Hamiltonian splitting Boris","title":"GEMPIC.HamiltonianSplittingBoris","text":"HamiltonianSplittingBoris( maxwell_solver,\n                           kernel_smoother_0, kernel_smoother_1,\n                           particle_group,\n                           e_dofs_1, e_dofs_2, b_dofs)\n\nBoris pusher in GEMPIC framework (spline finite elements)\n\nmid describing the magnetic field at time t_n+12 (used for push)\nj_dofs for kernel representation of current density. \nmaxwell_solver    : Maxwell solver\nkernel_smoother_0 : Kernel smoother\nkernel_smoother_1 : Kernel smoother\nparticle_group    : Particle group\nefield_dofs       : array for the coefficients of the efields \nbfield_dofs       : array for the coefficients of the bfield\nx_min             : Lower bound of x domain\nLx                : Length of the domain in x direction.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonian_splitting_boris/#GEMPIC.push_v_bpart!-Tuple{HamiltonianSplittingBoris, Float64}","page":"Hamiltonian splitting Boris","title":"GEMPIC.push_v_bpart!","text":"push_v_bpart!(splitting, dt)\n\nPusher for vxB part\n\n\n\n\n\n","category":"method"},{"location":"hamiltonian_splitting_boris/#GEMPIC.push_v_epart!-Tuple{Any, Any}","page":"Hamiltonian splitting Boris","title":"GEMPIC.push_v_epart!","text":"push_v_epart(splitting, dt)\n\nPusher for E nabla_v part\n\nV_new = V_old + dt  E\n\n\n\n\n\n","category":"method"},{"location":"hamiltonian_splitting_boris/#GEMPIC.push_x_accumulate_j!-Tuple{Any, Any}","page":"Hamiltonian splitting Boris","title":"GEMPIC.push_x_accumulate_j!","text":"push_x_accumulate_j!(splitting, dt)\n\nPusher for x and accumulate current densities\n\nFor each particle compute the index of the first DoF on the grid it  contributes to and its position (normalized to cell size one). \n\nThen update particle position:  X_new = X_old + dt  V\n\nnote: Note\nj_dofs does not hold the values for j itself but  for the integrated j.\n\n\n\n\n\n","category":"method"},{"location":"hamiltonian_splitting_boris/#GEMPIC.staggering!-Tuple{Any, Any}","page":"Hamiltonian splitting Boris","title":"GEMPIC.staggering!","text":"staggering(splitting, dt)\n\nPropagate E_0 to E_12 and x_0 to x_12 to initialize  the staggering\n\nsplitting : time splitting object \ndt   : time step\n\n\n\n\n\n","category":"method"},{"location":"hamiltonian_splitting_boris/#GEMPIC.strang_splitting!-Tuple{HamiltonianSplittingBoris, Float64, Int64}","page":"Hamiltonian splitting Boris","title":"GEMPIC.strang_splitting!","text":"strang_splitting(splitting, dt, number_steps)\n\nSecond order Boris pusher using staggered grid\n\nsplitting : time splitting object \ndt   : time step\nnumber_steps : number of time steps\n\n\n\n\n\n","category":"method"},{"location":"#GEMPIC.jl-Documentation","page":"GEMPIC.jl Documentation","title":"GEMPIC.jl Documentation","text":"","category":"section"},{"location":"","page":"GEMPIC.jl Documentation","title":"GEMPIC.jl Documentation","text":"Geometric ElectroMagnetic Particle-In-Cell Methods","category":"page"},{"location":"","page":"GEMPIC.jl Documentation","title":"GEMPIC.jl Documentation","text":"A Julia implementation of the GEMPIC","category":"page"},{"location":"","page":"GEMPIC.jl Documentation","title":"GEMPIC.jl Documentation","text":"This package implements a Finite Element Particle-in-Cell method based on the discretization of the underlying Hamiltonian structure of the Vlasov-Maxwell system. ","category":"page"}]
}
